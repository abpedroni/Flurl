// This file was auto-generated by Flurl.CodeGen. Do not edit directly.
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace Flurl.Http.Newtonsoft
{
	/// <summary>
	/// Fluent extension methods on String, Url, Uri, and IFlurlRequest.
	/// </summary>
	public static class GeneratedExtensions
	{
		/// <summary>
		/// Sends an asynchronous GET request.
		/// </summary>
		/// <param name="request">This IFlurlRequest</param>
		/// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
		/// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
		/// <returns>A Task whose result is the JSON response body deserialized to a dynamic.</returns>
		public static Task<dynamic> GetJsonAsync(this IFlurlRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default) {
			return request.SendAsync(HttpMethod.Get, null, completionOption, cancellationToken).ReceiveJson();
		}
		
		/// <summary>
		/// Sends an asynchronous GET request.
		/// </summary>
		/// <param name="request">This IFlurlRequest</param>
		/// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
		/// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
		/// <returns>A Task whose result is the JSON response body deserialized to a list of dynamics.</returns>
		public static Task<IList<dynamic>> GetJsonListAsync(this IFlurlRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default) {
			return request.SendAsync(HttpMethod.Get, null, completionOption, cancellationToken).ReceiveJsonList();
		}
		
		/// <summary>
		/// Creates a FlurlRequest and sends an asynchronous GET request.
		/// </summary>
		/// <param name="url">This Flurl.Url.</param>
		/// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
		/// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
		/// <returns>A Task whose result is the JSON response body deserialized to a dynamic.</returns>
		public static Task<dynamic> GetJsonAsync(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default) {
			return new FlurlRequest(url).GetJsonAsync(completionOption, cancellationToken);
		}
		
		/// <summary>
		/// Creates a FlurlRequest and sends an asynchronous GET request.
		/// </summary>
		/// <param name="url">This Flurl.Url.</param>
		/// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
		/// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
		/// <returns>A Task whose result is the JSON response body deserialized to a list of dynamics.</returns>
		public static Task<IList<dynamic>> GetJsonListAsync(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default) {
			return new FlurlRequest(url).GetJsonListAsync(completionOption, cancellationToken);
		}
		
		/// <summary>
		/// Creates a FlurlRequest and sends an asynchronous GET request.
		/// </summary>
		/// <param name="url">This URL.</param>
		/// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
		/// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
		/// <returns>A Task whose result is the JSON response body deserialized to a dynamic.</returns>
		public static Task<dynamic> GetJsonAsync(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default) {
			return new FlurlRequest(url).GetJsonAsync(completionOption, cancellationToken);
		}
		
		/// <summary>
		/// Creates a FlurlRequest and sends an asynchronous GET request.
		/// </summary>
		/// <param name="url">This URL.</param>
		/// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
		/// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
		/// <returns>A Task whose result is the JSON response body deserialized to a list of dynamics.</returns>
		public static Task<IList<dynamic>> GetJsonListAsync(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default) {
			return new FlurlRequest(url).GetJsonListAsync(completionOption, cancellationToken);
		}
		
		/// <summary>
		/// Creates a FlurlRequest and sends an asynchronous GET request.
		/// </summary>
		/// <param name="uri">This System.Uri.</param>
		/// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
		/// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
		/// <returns>A Task whose result is the JSON response body deserialized to a dynamic.</returns>
		public static Task<dynamic> GetJsonAsync(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default) {
			return new FlurlRequest(uri).GetJsonAsync(completionOption, cancellationToken);
		}
		
		/// <summary>
		/// Creates a FlurlRequest and sends an asynchronous GET request.
		/// </summary>
		/// <param name="uri">This System.Uri.</param>
		/// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
		/// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
		/// <returns>A Task whose result is the JSON response body deserialized to a list of dynamics.</returns>
		public static Task<IList<dynamic>> GetJsonListAsync(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default) {
			return new FlurlRequest(uri).GetJsonListAsync(completionOption, cancellationToken);
		}
		
	}
}
